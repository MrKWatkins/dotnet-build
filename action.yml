name: .NET Build
description: "Builds a .NET solution."
inputs:
  directory:
    description: "Directory containing the solution."
    required: false
    default: "src"
  name:
    description: "Name of the solution, used in the name of the test results and coverage artifacts"
    required: false
    default: ""
  coverage-run-settings:
    description: "Optional code coverage exclude filter."
    required: false
    default: ""

runs:
  using: composite

  steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x

    - name: Install dotnet-coverage
      shell: bash
      run: dotnet tool install -g dotnet-coverage

    - name: Install LiquidTestReports.Cli
      shell: bash
      run: dotnet tool install --global LiquidTestReports.Cli --version 2.0.0-beta.2

    - name: Restore Dependencies
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: dotnet restore

    - name: Verify Code Is Correctly Formatted
      continue-on-error: true
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: dotnet format --verify-no-changes

    - name: Build
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: dotnet build --no-restore --configuration Release

    - name: Test
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: dotnet test --no-restore --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --collect:"Code Coverage;Format=cobertura;IncludeTestAssembly=false;" ${{ inputs.coverage-run-settings != '' && format('--settings {0}', inputs.coverage-run-settings) || '' }}

    - name: Generate Test Report
      if: success() || failure()
      shell: bash
      run: liquid --inputs "File=${{ inputs.directory }}/**/TestResults/test-results.trx;Format=Trx" --output-file test-results.md --title "${{ inputs.name }} Test Report"

    - name: Add Test Report to Job Summary
      shell: bash
      run: cat test-results.md >> $GITHUB_STEP_SUMMARY

    - name: Merge Coverage Files
      shell: bash
      working-directory: ${{ inputs.directory }}
      run: dotnet-coverage merge -f cobertura -o coverage.xml ./**/TestResults/**/*.cobertura.xml

    - name: Generate Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ${{ inputs.directory }}/coverage.xml
        format: markdown
        indicators: true
        output: file
        thresholds: '90 95'

    - name: Add Coverage Report to Job Summary
      shell: bash
      run: |
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "# ${{ inputs.name }} Coverage Report" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
